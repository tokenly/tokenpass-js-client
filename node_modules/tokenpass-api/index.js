var request = require('request')
var crypto = require('crypto')


var generateHmac  = function(method,url,data,oauth_token,secret_key,nonce) {
  var encoding = "base64";
  var algorithm = "sha256";
  var permameter = method + '\n' + url + '\n' + data + '\n' + oauth_token + '\n' + nonce;
  
  /*var hash = crypto.createHmac('sha256', secret_key)
  hash.update(method + url + data  + oauth_token + nonce)
  signature = hash.digest('base64')
  
  return signature*/
  return crypto.createHmac(algorithm, secret_key).update(permameter).digest(encoding);
}


var requestGetPromise = function(_url, _postHeaders, body){
  return new Promise(function(resolve, reject) {
    var options = {
      url: _url,
      method : 'GET',
      headers: _postHeaders,
      qs: body
    };
     
    request(options, function (error, response, body) { 
      console.log(response)
      if (!error && response.statusCode == 200) {
        var info = JSON.parse(body);
        resolve(info)
      }
      else{
		var err = JSON.parse(body);  
        reject(err)
      }
    });
  });
}


var requestPostPromise = function(_url, _postHeaders, _postData){
  return new Promise(function(resolve, reject) {
    var data = _postData || {}
    var options = {
      url: _url,
      headers: _postHeaders,
      method: 'POST',
      body: JSON.stringify(data)
    };
     
    request(options, function (error, response, body) {
	  //console.log(response)	
      if (!error && response.statusCode == 200) {
        var info = JSON.parse(body);
        resolve(info)
      }
      else{
		var err = JSON.parse(body);  
        reject(err)
      }
    });
  });
}



var TOKENPASS = function (_clientId,_clientSecret,_apiUrl) {
  this.client_id = _clientId;
  this.client_secret = _clientSecret;
  this.api_url = _apiUrl;
  console.log(' init clinet id: '+ this.client_id)
  console.log(' init client_secret: '+ this.client_secret)
  console.log(' init api_url: '+ this.api_url)
}


/*********** checkTokenAccess ********/

TOKENPASS.prototype.checkTokenAccess = function (username,rules,oauth_token) {
  rules.client_id = this.client_id
  rules.oauth_token = oauth_token
  var URL = this.api_url+'/api/v1/tca/check/'+username;
 
  var headers = {
      'Authorization': 'Bearer '+ this.client_secret,
      'Content-Type': 'application/json',
      'Accept': 'application/json',
  }
 
  return requestGetPromise(URL, headers, rules)
}


/*********** getPublicAddresses ********/

TOKENPASS.prototype.getPublicAddresses = function (username,rules,oauth_token) {
  rules.client_id = this.client_id
  rules.client_secret = this.client_secret
  var secret_key = this.client_secret
  var URL = this.api_url+'/api/v1/tca/addresses/'+username;
  var unix = Math.round(+new Date()/1000);
  var signature = generateHmac('GET',URL,rules,oauth_token,secret_key,unix);
  
  console.log(URL)
  
  var headers = {
      'X-Tokenly-Auth-Api-Token': oauth_token,
      'X-Tokenly-Auth-Nonce': unix,
      'X-Tokenly-Auth-Signature': signature,
      'Content-Type': 'application/json',
      'Accept': 'application/json',
  }
 
  return requestGetPromise(URL, headers, rules)
}

/*********** registerAddress ********/

TOKENPASS.prototype.registerAddress = function (postData,oauth_token) {
  postData.client_id = this.client_id
  postData.oauth_token = oauth_token
  postData.scope = 'user,tca,manage-address';
  var URL = this.api_url+'/api/v1/tca/address';
 
  var headers = {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
  }

  return requestPostPromise(URL, headers, postData)
}


module.exports = TOKENPASS
